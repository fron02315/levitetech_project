{"ast":null,"code":"import axios from 'axios';\nvar baseURL = 'http://127.0.0.1:8000/';\nvar axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    'Authorization': localStorage.getItem('access_token') ? \"JWT \" + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    'accept': 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  var originalRequest = error.config; // Prevent infinite loops\n\n  if (error.response && error.response.status === 401 && originalRequest.url === baseURL + 'authentication/token/refresh/') {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === \"token_not_valid\" && error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    var refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      var tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      var now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/authentication/token/refresh/', {\n          refresh: refreshToken\n        }).then(function (response) {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n          originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log(\"Refresh token not available.\");\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/Users/fon/Documents/levitatech_project/frontend/src/axiosApi.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","localStorage","getItem","interceptors","response","use","error","originalRequest","config","status","url","removeItem","window","location","href","Promise","reject","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst baseURL = 'http://127.0.0.1:8000/'\n\nconst axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 5000,\n    headers: {\n        'Authorization': localStorage.getItem('access_token') ? \"JWT \" + localStorage.getItem('access_token') : null,\n        'Content-Type': 'application/json',\n        'accept': 'application/json'\n    }\n});\n\n\naxiosInstance.interceptors.response.use(\n    response => response,\n    error => {\n        const originalRequest = error.config;\n\n        // Prevent infinite loops\n        if (error.response && error.response.status === 401 && originalRequest.url === baseURL+'authentication/token/refresh/') {\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('refresh_token');\n            window.location.href = '/login/';\n            return Promise.reject(error);\n        }\n\n        if (error.response.data.code === \"token_not_valid\" &&\n            error.response.status === 401 && \n            error.response.statusText === \"Unauthorized\") \n            {\n                const refreshToken = localStorage.getItem('refresh_token');\n\n                if (refreshToken){\n                    const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n                    // exp date in token is expressed in seconds, while now() returns milliseconds:\n                    const now = Math.ceil(Date.now() / 1000);\n                    console.log(tokenParts.exp);\n\n                    if (tokenParts.exp > now) {\n                        return axiosInstance\n                        .post('/authentication/token/refresh/', {refresh: refreshToken})\n                        .then((response) => {\n            \n                            localStorage.setItem('access_token', response.data.access);\n                            localStorage.setItem('refresh_token', response.data.refresh);\n            \n                            axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n                            originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n            \n                            return axiosInstance(originalRequest);\n                        })\n                        .catch(err => {\n                            console.log(err)\n                        });\n                    }else{\n                        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n                        localStorage.removeItem('access_token');\n                        localStorage.removeItem('refresh_token');\n                        window.location.href = '/login/';\n                    }\n                }else{\n                    console.log(\"Refresh token not available.\")\n                    localStorage.removeItem('access_token');\n                    localStorage.removeItem('refresh_token');\n                    window.location.href = '/login/';\n                }\n        }\n      \n     \n      // specific error handling done elsewhere\n      return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance"]},"metadata":{},"sourceType":"module"}